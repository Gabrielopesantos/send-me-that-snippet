// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sqlc_queries.sql

package paste

import (
	"context"
	"database/sql"
)

const delete = `-- name: Delete :one
DELETE FROM pastes
WHERE id = $1
RETURNING id, content, content_sha, language, created_at, expires_in, expired
`

func (q *Queries) Delete(ctx context.Context, id string) (Paste, error) {
	row := q.db.QueryRowContext(ctx, delete, id)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ContentSha,
		&i.Language,
		&i.CreatedAt,
		&i.ExpiresIn,
		&i.Expired,
	)
	return i, err
}

const get = `-- name: Get :one
SELECT id, content, content_sha, language, created_at, expires_in, expired
FROM pastes
WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id string) (Paste, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ContentSha,
		&i.Language,
		&i.CreatedAt,
		&i.ExpiresIn,
		&i.Expired,
	)
	return i, err
}

const insert = `-- name: Insert :one
INSERT INTO pastes (id, content, content_sha, language, created_at, expires_in, expired)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, content, content_sha, language, created_at, expires_in, expired
`

type InsertParams struct {
	ID         string
	Content    string
	ContentSha string
	Language   string
	CreatedAt  sql.NullTime
	ExpiresIn  int64
	Expired    bool
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) (Paste, error) {
	row := q.db.QueryRowContext(ctx, insert,
		arg.ID,
		arg.Content,
		arg.ContentSha,
		arg.Language,
		arg.CreatedAt,
		arg.ExpiresIn,
		arg.Expired,
	)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ContentSha,
		&i.Language,
		&i.CreatedAt,
		&i.ExpiresIn,
		&i.Expired,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE pastes
SET
    content = $1,
    content_sha = $2,
    language = $3,
    expired = $4
WHERE id = $5
RETURNING id, content, content_sha, language, created_at, expires_in, expired
`

type UpdateParams struct {
	Content    string
	ContentSha string
	Language   string
	Expired    bool
	ID         string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Paste, error) {
	row := q.db.QueryRowContext(ctx, update,
		arg.Content,
		arg.ContentSha,
		arg.Language,
		arg.Expired,
		arg.ID,
	)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ContentSha,
		&i.Language,
		&i.CreatedAt,
		&i.ExpiresIn,
		&i.Expired,
	)
	return i, err
}
